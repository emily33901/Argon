using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using ArgonCore;

namespace DelegateGenerator
{
    /// <summary>
    /// <para>This program is for creating a class of delegates from an interface implementation.</para>
    /// <para>The resulting classes will be in the form of the name that the class implements with the correct attributes applied</para>
    /// </summary>
    class Program
    {
        public class DelegateClassDefinition
        {
            public class DelegateDefinition
            {
                public string name;
                public string return_type;

                // stored in the form (type, name)
                public List<(string, string)> args;

                public DelegateDefinition()
                {
                    args = new List<(string, string)>();
                }
            }

            public string containing_namespace;
            public string name;
            public List<DelegateDefinition> delegates;

            public DelegateClassDefinition()
            {
                delegates = new List<DelegateDefinition>();
            }
        }

        public static List<DelegateClassDefinition> DelegateClasses { get; set; }

        static string GetCorrectTypeName(Type t)
        {
            var original_name = t.Name;
            var new_name = original_name;

            if(t.IsByRef)
            {
                new_name = "ref " + original_name.Substring(0, original_name.Length - 1);
            }

            switch(t.FullName)
            {
                case "System.Void":
                    new_name = "void";
                    break;
                case "System.Int":
                    new_name = "int";
                    break;
                case "System.String":
                    new_name = "string";
                    break;
                case "System.UInt32":
                    new_name = "uint";
                    break;
            }

            return new_name;
        }

        static void Main(string[] args)
        {
            DelegateClasses = new List<DelegateClassDefinition>();

            foreach (var a in InterfaceLoader.GetInterfaceAssemblies())
            {
                foreach (var type in a.GetTypes())
                {
                    if (InterfaceLoader.IsInterfaceImpl(type))
                    {
                        var impl_attribute = type.GetCustomAttribute<InterfaceImplAttribute>();

                        var found = true;

                        // See whether we have already added some methods for this delegate class
                        var delegate_class = DelegateClasses.Find(x => x.name == impl_attribute.Implements);
                        if (delegate_class == null)
                        {
                            found = false;
                            delegate_class = new DelegateClassDefinition { name = impl_attribute.Implements, containing_namespace = type.Namespace };
                        }

                        var new_delegates = new List<DelegateClassDefinition.DelegateDefinition>();

                        var methods = InterfaceLoader.InterfaceMethodsForType(type);

                        foreach (var mi in methods)
                        {
                            var delegate_name = mi.Name + "Delegate";

                            // See whether we have already got this delegate
                            if (delegate_class.delegates.Find(x => x.name == delegate_name) != null) continue;

                            // Parse the method type into its return, name and param and names
                            var new_delegate = new DelegateClassDefinition.DelegateDefinition
                            {
                                name = delegate_name,
                                return_type = GetCorrectTypeName(mi.ReturnType),
                            };

                            foreach (var param in mi.GetParameters())
                            {
                                new_delegate.args.Add((GetCorrectTypeName(param.ParameterType), param.Name));
                            }

                            new_delegates.Add(new_delegate);
                        }

                        delegate_class.delegates.AddRange(new_delegates);

                        if (!found) DelegateClasses.Add(delegate_class);
                    }
                }
            }

            WriteFiles();

            Console.ReadLine();
        }

        static string file_prolog =
@"using System;

// Autogenerated @ {2}
namespace {0}
{{
    /// <summary>
    /// Exports the delegates for all interfaces that implement {1}
    /// </summary>
    [ArgonCore.InterfaceDelegate(Name = ""{1}"")]
    class {1}_Delegates
    {{";

        static string file_epilog =
@"    }
}";

        static void WriteFiles()
        {
            foreach (var c in DelegateClasses)
            {
                var new_file = new StringBuilder();

                // Print file prolog
                new_file.AppendFormat(file_prolog, c.containing_namespace, c.name, DateTime.Now.Date.ToString("dd/MM/yy"));
                new_file.AppendLine();

                foreach (var del in c.delegates)
                {
                    new_file.AppendFormat("        public delegate {0} {1}(", del.return_type, del.name);
                    for (var i = 0; i < del.args.Count; i++)
                    {
                        var (t, name) = del.args[i];

                        new_file.AppendFormat("{0} {1}", t, name);

                        if (i != del.args.Count - 1)
                        {
                            new_file.Append(", ");
                        }
                    }

                    new_file.AppendLine(");");
                }

                new_file.AppendLine(file_epilog);

                Console.WriteLine(new_file.ToString());
                
                File.WriteAllText(String.Format("../../../InterfaceDelegates/{0}Delegates.cs", c.name), new_file.ToString());
            }
        }
    }
}
