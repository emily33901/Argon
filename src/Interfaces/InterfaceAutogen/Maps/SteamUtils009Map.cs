using System;

// Autogenerated @ 24/06/18
namespace InterfaceUtils
{
    /// <summary>
    /// Implements the map for interface SteamUtils009
    /// </summary>
    [ArgonCore.Interface.Map(Name = "SteamUtils009", Implements = "SteamUtils")]
    public class SteamUtils009_Map : ArgonCore.Interface.IBaseInterfaceMap
    {
        public int GetSecondsSinceAppActive(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetSecondsSinceAppActive",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public int GetSecondsSinceComputerActive(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetSecondsSinceComputerActive",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public uint GetConnectedUniverse(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetConnectedUniverse",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<uint>(PipeId, f);
        }
        public long GetServerRealTime(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetServerRealTime",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<long>(PipeId, f);
        }
        public string GetIPCountry(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetIPCountry",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public bool GetImageSize(IntPtr _, int image, ref System.UInt32 width, ref System.UInt32 height)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetImageSize",
               Args = new object[] {image, width, height},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool GetImageRGBA(IntPtr _, int image, IntPtr dest, int total_dest)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetImageRGBA",
               Args = new object[] {image, dest, total_dest},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool GetCSERIPPort(IntPtr _, ref System.UInt32 ip, ref System.UInt16 port)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetCSERIPPort",
               Args = new object[] {ip, port},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public System.Byte GetCurrentBatteryPower(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetCurrentBatteryPower",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<System.Byte>(PipeId, f);
        }
        public int GetAppId(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetAppId",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public void SetOverlayNotificationPosition(IntPtr _, uint pos)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetOverlayNotificationPosition",
               Args = new object[] {pos},
            };
            ArgonCore.IPC.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public bool IsAPICallCompleted(IntPtr _, int handle, ref System.Boolean failed)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsAPICallCompleted",
               Args = new object[] {handle, failed},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int GetAPICallFailureReason(IntPtr _, int handle)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetAPICallFailureReason",
               Args = new object[] {handle},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public bool GetAPICallResult(IntPtr _, int handle, IntPtr callback, int callback_size, int callback_expected, ref System.Boolean failed)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetAPICallResult",
               Args = new object[] {handle, callback, callback_size, callback_expected, failed},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public void RunFrame(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "RunFrame",
               Args = new object[] {},
            };
            ArgonCore.IPC.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public uint GetIPCCallCount(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetIPCCallCount",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<uint>(PipeId, f);
        }
        public void SetWarningMessageHook(IntPtr _, IntPtr function)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetWarningMessageHook",
               Args = new object[] {function},
            };
            ArgonCore.IPC.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public bool IsOverlayEnabled(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsOverlayEnabled",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool OverlayNeedsPresent(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "OverlayNeedsPresent",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int CheckFileSignature(IntPtr _, string file_name)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "CheckFileSignature",
               Args = new object[] {file_name},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public bool ShowGamePadTextInput(IntPtr _, uint input_mode, uint input_line_mode, IntPtr description, uint max_description, string existing_text)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "ShowGamePadTextInput",
               Args = new object[] {input_mode, input_line_mode, description, max_description, existing_text},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public uint GetEnteredGamepadTextLength(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetEnteredGamepadTextLength",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<uint>(PipeId, f);
        }
        public bool GetEnteredGamepadTextInput(IntPtr _, string text, int length)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetEnteredGamepadTextInput",
               Args = new object[] {text, length},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public string GetSteamUILanguage(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetSteamUILanguage",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public bool IsSteamRunningInVR(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsSteamRunningInVR",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public void SetOverlayNotificationInset(IntPtr _, int horizontal, int vertical)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetOverlayNotificationInset",
               Args = new object[] {horizontal, vertical},
            };
            ArgonCore.IPC.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public bool IsSteamInBigPictureMode(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsSteamInBigPictureMode",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public void StartVRDashboard(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "StartVRDashboard",
               Args = new object[] {},
            };
            ArgonCore.IPC.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public bool IsVRHeadsetStreamingEnabled(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsVRHeadsetStreamingEnabled",
               Args = new object[] {},
            };
            return ArgonCore.IPC.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public void SetVRHeadsetStreamingEnabled(IntPtr _, bool enabled)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetVRHeadsetStreamingEnabled",
               Args = new object[] {enabled},
            };
            ArgonCore.IPC.ClientPipe.CallSerializedFunction(PipeId, f);
        }
    }
}
