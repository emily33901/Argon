using System;
using System.Runtime.InteropServices;

// Autogenerated @ 24/05/18
namespace InterfaceClient
{
    /// <summary>
    /// Exports the delegates for all interfaces that implement SteamClient
    /// </summary>
    [ArgonCore.Interface.Delegate(Name = "SteamClient")]
    class SteamClient_Delegates
    {
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate uint CreateSteamPipeDelegate(IntPtr _);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate bool ReleaseSteamPipeDelegate(IntPtr _, uint pipe);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate uint ConnectToGlobalUserDelegate(IntPtr _, uint pipe);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate uint CreateLocalUserDelegate(IntPtr _, ref System.UInt32 user, uint account_type);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate void ReleaseUserDelegate(IntPtr _, uint user, uint pipe);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamUserDelegate(IntPtr _, uint user, uint pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamGameServerDelegate(IntPtr _, uint user, uint pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate void SetLocalIPBindingDelegate(IntPtr _, uint ip, uint port);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamFriendsDelegate(IntPtr _, uint user, uint pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamUtilsDelegate(IntPtr _, uint pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamMatchmakingDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamMatchmakingServersDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamGenericInterfaceDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamUserStatsDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamGameServerStatsDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamAppsDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamNetworkingDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamRemoteStorageDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamScreenshotsDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate void RunFrameDelegate(IntPtr _);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate uint GetIPCCallCountDelegate(IntPtr _);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate void SetWarningMessageHookDelegate(IntPtr _, IntPtr function);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate bool ShutdownIfAllPipesClosedDelegate(IntPtr _);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamHTTPDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamUnifiedMessagesDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamControllerDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamUGCDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamAppListDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamMusicDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamMusicRemoteDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamHTMLSurfaceDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate void Set_SteamAPI_CPostAPIResultInProcessDelegate(IntPtr _, IntPtr function);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate void Remove_SteamAPI_CPostAPIResultInProcessDelegate(IntPtr _, IntPtr function);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate void Set_SteamAPI_CCheckCallbackRegisteredInProcessDelegate(IntPtr _, IntPtr function);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamInventoryDelegate(IntPtr _, uint user, IntPtr pipe, string version);
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        public delegate IntPtr GetSteamVideoDelegate(IntPtr _, uint user, IntPtr pipe, string version);
    }
}
