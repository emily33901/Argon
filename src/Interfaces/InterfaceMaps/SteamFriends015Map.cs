using System;

// Autogenerated @ 21/07/18
namespace InterfaceFriends
{
    /// <summary>
    /// Implements the map for interface SteamFriends015
    /// </summary>
    [ArgonCore.Interface.Map(Name = "SteamFriends015", Implements = "SteamFriends")]
    public class SteamFriends015_Map : ArgonCore.Interface.IBaseInterfaceMap
    {
        public string GetPersonaName(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetPersonaName",
               Args = new object[] {},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public int SetPersonaName(IntPtr _, string name)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetPersonaName",
               Args = new object[] {name},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public uint GetPersonaState(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetPersonaState",
               Args = new object[] {},
            };
            return Client.ClientPipe.CallSerializedFunction<uint>(PipeId, f);
        }
        public int GetFriendCount(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendCount",
               Args = new object[] {},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public ulong GetFriendByIndex(IntPtr _, int index)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendByIndex",
               Args = new object[] {index},
            };
            return Client.ClientPipe.CallSerializedFunction<ulong>(PipeId, f);
        }
        public uint GetFriendRelationship(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendRelationship",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<uint>(PipeId, f);
        }
        public uint GetFriendPersonaState(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendPersonaState",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<uint>(PipeId, f);
        }
        public string GetFriendPersonaName(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendPersonaName",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public bool GetFriendGamePlayed3(IntPtr _, ulong steam_id, IntPtr friend_game_info_out)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendGamePlayed3",
               Args = new object[] {steam_id, friend_game_info_out},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public string GetFriendPersonaNameHistory(IntPtr _, ulong steam_id, int index)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendPersonaNameHistory",
               Args = new object[] {steam_id, index},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public int GetFriendSteamLevel(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendSteamLevel",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public string GetPlayerNickname(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetPlayerNickname",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public int GetFriendsGroupCount(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendsGroupCount",
               Args = new object[] {},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public System.UInt16 GetGroupIdByIndex(IntPtr _, int index)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetGroupIdByIndex",
               Args = new object[] {index},
            };
            return Client.ClientPipe.CallSerializedFunction<System.UInt16>(PipeId, f);
        }
        public string GetFriendsGroupName(IntPtr _, System.UInt16 id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendsGroupName",
               Args = new object[] {id},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public int GetFriendsGroupMembersCount(IntPtr _, System.UInt16 id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendsGroupMembersCount",
               Args = new object[] {id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public void GetFriendsGroupMembersList(IntPtr _, System.UInt16 id, ref System.IntPtr steam_id_out, int max_steam_id_out)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendsGroupMembersList",
               Args = new object[] {id, steam_id_out, max_steam_id_out},
            };
            Client.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public bool HasFriend(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "HasFriend",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int GetClanCount(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanCount",
               Args = new object[] {},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public ulong GetClanByIndex(IntPtr _, int index)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanByIndex",
               Args = new object[] {index},
            };
            return Client.ClientPipe.CallSerializedFunction<ulong>(PipeId, f);
        }
        public string GetClanName(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanName",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public string GetClanTag(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanTag",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public bool GetClanActivityCounts(IntPtr _, ulong steam_id, ref System.Int32 online, ref System.Int32 in_game, ref System.Int32 chatting)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanActivityCounts",
               Args = new object[] {steam_id, online, in_game, chatting},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int DownloadClanActivityCounts(IntPtr _, System.UInt64[] clans, int count)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "DownloadClanActivityCounts",
               Args = new object[] {clans, count},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public int GetFriendCountFromSource(IntPtr _, ulong source_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendCountFromSource",
               Args = new object[] {source_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public ulong GetFriendFromSourceByIndex(IntPtr _, ulong source_id, int index)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendFromSourceByIndex",
               Args = new object[] {source_id, index},
            };
            return Client.ClientPipe.CallSerializedFunction<ulong>(PipeId, f);
        }
        public bool IsUserInSource(IntPtr _, ulong steam_id, ulong source_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsUserInSource",
               Args = new object[] {steam_id, source_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public void SetInGameVoiceSpeaking(IntPtr _, ulong steam_id, bool speaking)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetInGameVoiceSpeaking",
               Args = new object[] {steam_id, speaking},
            };
            Client.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public void ActivateGameOverlay(IntPtr _, string dialog)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "ActivateGameOverlay",
               Args = new object[] {dialog},
            };
            Client.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public void ActiveGameOverlayToUser(IntPtr _, string dialog, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "ActiveGameOverlayToUser",
               Args = new object[] {dialog, steam_id},
            };
            Client.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public void ActiveGameOverlayToWebPage(IntPtr _, string url)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "ActiveGameOverlayToWebPage",
               Args = new object[] {url},
            };
            Client.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public void ActivateGameOverlayToStore(IntPtr _, uint app_id, uint flag)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "ActivateGameOverlayToStore",
               Args = new object[] {app_id, flag},
            };
            Client.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public void SetPlayedWith(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetPlayedWith",
               Args = new object[] {steam_id},
            };
            Client.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public int GetSmallFriendAvatar(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetSmallFriendAvatar",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public int GetMediumFriendAvatar(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetMediumFriendAvatar",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public int GetLargeFriendAvatar(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetLargeFriendAvatar",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public bool RequestUserInformation(IntPtr _, ulong steam_id, bool require_name_only)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "RequestUserInformation",
               Args = new object[] {steam_id, require_name_only},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int RequestClanOfficerList(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "RequestClanOfficerList",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public ulong GetClanOwner(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanOwner",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<ulong>(PipeId, f);
        }
        public int GetClanOfficerCount(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanOfficerCount",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public bool SetRichPresence(IntPtr _, string key, string value)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetRichPresence",
               Args = new object[] {key, value},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool ClearRichPresence(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "ClearRichPresence",
               Args = new object[] {},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public string GetFriendRichPresence(IntPtr _, ulong steam_id, string key)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendRichPresence",
               Args = new object[] {steam_id, key},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public int GetFriendRichPresenceKeyCount(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendRichPresenceKeyCount",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public string GetFriendRichPresenceKeyByIndex(IntPtr _, ulong steam_id, int key)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendRichPresenceKeyByIndex",
               Args = new object[] {steam_id, key},
            };
            return Client.ClientPipe.CallSerializedFunction<string>(PipeId, f);
        }
        public void RequestFriendRichPresence(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "RequestFriendRichPresence",
               Args = new object[] {steam_id},
            };
            Client.ClientPipe.CallSerializedFunction(PipeId, f);
        }
        public bool InviteUserToGame(IntPtr _, ulong steam_id, string connect)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "InviteUserToGame",
               Args = new object[] {steam_id, connect},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int GetCoplayFriendCount(IntPtr _)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetCoplayFriendCount",
               Args = new object[] {},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public ulong GetCoplayFriend(IntPtr _, int index)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetCoplayFriend",
               Args = new object[] {index},
            };
            return Client.ClientPipe.CallSerializedFunction<ulong>(PipeId, f);
        }
        public int GetFriendCoplayTime(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendCoplayTime",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public uint GetFriendCoplayGame(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendCoplayGame",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<uint>(PipeId, f);
        }
        public int JoinClanChatRoom(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "JoinClanChatRoom",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public bool LeaveClanChatRoom(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "LeaveClanChatRoom",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int GetClanChatMemberCount(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanChatMemberCount",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public ulong GetChatMemberByIndex(IntPtr _, ulong steam_id, int index)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetChatMemberByIndex",
               Args = new object[] {steam_id, index},
            };
            return Client.ClientPipe.CallSerializedFunction<ulong>(PipeId, f);
        }
        public bool SendClanChatMessage(IntPtr _, ulong steam_id, string msg)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SendClanChatMessage",
               Args = new object[] {steam_id, msg},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int GetClanChatMessage(IntPtr _, ulong steam_id, int index, IntPtr text_out, int max_text, uint chat_type, ref System.UInt64 chater_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetClanChatMessage",
               Args = new object[] {steam_id, index, text_out, max_text, chat_type, chater_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public bool IsClanChatAdmin(IntPtr _, ulong chat_id, ulong user_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsClanChatAdmin",
               Args = new object[] {chat_id, user_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool IsClanChatWindowOpenInSteam(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsClanChatWindowOpenInSteam",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool OpenClanChatWindowInSteam(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "OpenClanChatWindowInSteam",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool CloseClanChatWindowInSteam(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "CloseClanChatWindowInSteam",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool SetListenForFriendsMessages(IntPtr _, bool intercept)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "SetListenForFriendsMessages",
               Args = new object[] {intercept},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool ReplyToFriendMessage(IntPtr _, ulong steam_id, string msg)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "ReplyToFriendMessage",
               Args = new object[] {steam_id, msg},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public int GetFriendMessage(IntPtr _, ulong steam_id, int id, IntPtr data_out, int max_data_out, uint chat_type)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFriendMessage",
               Args = new object[] {steam_id, id, data_out, max_data_out, chat_type},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public int GetFollowerCount(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "GetFollowerCount",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public int IsFollowing(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsFollowing",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public int EnumerateFollowingList(IntPtr _, uint starting_index)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "EnumerateFollowingList",
               Args = new object[] {starting_index},
            };
            return Client.ClientPipe.CallSerializedFunction<int>(PipeId, f);
        }
        public bool IsClanPublic(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsClanPublic",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
        public bool IsClanOfficialGameGroup(IntPtr _, ulong steam_id)
        {
            var f = new ArgonCore.IPC.SerializedFunction
            {
               ClientId = ClientId,
               InterfaceId = InterfaceId,
               Name = "IsClanOfficialGameGroup",
               Args = new object[] {steam_id},
            };
            return Client.ClientPipe.CallSerializedFunction<bool>(PipeId, f);
        }
    }
}
