using System;

// Autogenerated @ 11/08/18
namespace InterfaceFriends
{
    /// <summary>
    /// Implements the map for interface SteamFriends015
    /// </summary>
    [ArgonCore.Interface.Map(Name = "SteamFriends015")]
    public class SteamFriends015_Map : ArgonCore.Interface.IBaseInterfaceMap
    {
        public string GetPersonaName(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetPersonaName",
                Args = new object[] {},

            });



            return (string)result.Result;
        }
        public int SetPersonaName(IntPtr _, string name)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "SetPersonaName",
                Args = new object[] {name},

            });



            return (int)result.Result;
        }
        public uint GetPersonaState(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetPersonaState",
                Args = new object[] {},

            });



            return (uint)result.Result;
        }
        public int GetFriendCount(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendCount",
                Args = new object[] {},

            });



            return (int)result.Result;
        }
        public ulong GetFriendByIndex(IntPtr _, int index)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendByIndex",
                Args = new object[] {index},

            });



            return (ulong)result.Result;
        }
        public uint GetFriendRelationship(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendRelationship",
                Args = new object[] {steam_id},

            });



            return (uint)result.Result;
        }
        public uint GetFriendPersonaState(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendPersonaState",
                Args = new object[] {steam_id},

            });



            return (uint)result.Result;
        }
        public string GetFriendPersonaName(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendPersonaName",
                Args = new object[] {steam_id},

            });



            return (string)result.Result;
        }
        public bool GetFriendGamePlayed(IntPtr _, ulong steam_id, IntPtr friend_game_info_out)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendGamePlayed",
                Args = new object[] {steam_id, friend_game_info_out},

            });



            return (bool)result.Result;
        }
        public string GetFriendPersonaNameHistory(IntPtr _, ulong steam_id, int index)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendPersonaNameHistory",
                Args = new object[] {steam_id, index},

            });



            return (string)result.Result;
        }
        public int GetFriendSteamLevel(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendSteamLevel",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public string GetPlayerNickname(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetPlayerNickname",
                Args = new object[] {steam_id},

            });



            return (string)result.Result;
        }
        public int GetFriendsGroupCount(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendsGroupCount",
                Args = new object[] {},

            });



            return (int)result.Result;
        }
        public short GetGroupIdByIndex(IntPtr _, int index)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetGroupIdByIndex",
                Args = new object[] {index},

            });



            return (short)result.Result;
        }
        public string GetFriendsGroupName(IntPtr _, short id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendsGroupName",
                Args = new object[] {id},

            });



            return (string)result.Result;
        }
        public int GetFriendsGroupMembersCount(IntPtr _, short id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendsGroupMembersCount",
                Args = new object[] {id},

            });



            return (int)result.Result;
        }
        public void GetFriendsGroupMembersList(IntPtr _, short id, ref IntPtr steam_id_out, int max_steam_id_out)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendsGroupMembersList",
                Args = new object[] {id, steam_id_out, max_steam_id_out},

            });

            steam_id_out = (IntPtr)result.Args[1];


        }
        public bool HasFriend(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "HasFriend",
                Args = new object[] {steam_id},

            });



            return (bool)result.Result;
        }
        public int GetClanCount(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanCount",
                Args = new object[] {},

            });



            return (int)result.Result;
        }
        public ulong GetClanByIndex(IntPtr _, int index)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanByIndex",
                Args = new object[] {index},

            });



            return (ulong)result.Result;
        }
        public string GetClanName(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanName",
                Args = new object[] {steam_id},

            });



            return (string)result.Result;
        }
        public string GetClanTag(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanTag",
                Args = new object[] {steam_id},

            });



            return (string)result.Result;
        }
        public bool GetClanActivityCounts(IntPtr _, ulong steam_id, ref int online, ref int in_game, ref int chatting)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanActivityCounts",
                Args = new object[] {steam_id, online, in_game, chatting},

            });

            online = (int)result.Args[1];
            in_game = (int)result.Args[2];
            chatting = (int)result.Args[3];


            return (bool)result.Result;
        }
        public int DownloadClanActivityCounts(IntPtr _, System.UInt64[] clans, int count)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "DownloadClanActivityCounts",
                Args = new object[] {clans, count},

            });



            return (int)result.Result;
        }
        public int GetFriendCountFromSource(IntPtr _, ulong source_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendCountFromSource",
                Args = new object[] {source_id},

            });



            return (int)result.Result;
        }
        public ulong GetFriendFromSourceByIndex(IntPtr _, ulong source_id, int index)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendFromSourceByIndex",
                Args = new object[] {source_id, index},

            });



            return (ulong)result.Result;
        }
        public bool IsUserInSource(IntPtr _, ulong steam_id, ulong source_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsUserInSource",
                Args = new object[] {steam_id, source_id},

            });



            return (bool)result.Result;
        }
        public void SetInGameVoiceSpeaking(IntPtr _, ulong steam_id, bool speaking)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "SetInGameVoiceSpeaking",
                Args = new object[] {steam_id, speaking},

            });



        }
        public void ActivateGameOverlay(IntPtr _, string dialog)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "ActivateGameOverlay",
                Args = new object[] {dialog},

            });



        }
        public void ActiveGameOverlayToUser(IntPtr _, string dialog, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "ActiveGameOverlayToUser",
                Args = new object[] {dialog, steam_id},

            });



        }
        public void ActiveGameOverlayToWebPage(IntPtr _, string url)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "ActiveGameOverlayToWebPage",
                Args = new object[] {url},

            });



        }
        public void ActivateGameOverlayToStore(IntPtr _, uint app_id, uint flag)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "ActivateGameOverlayToStore",
                Args = new object[] {app_id, flag},

            });



        }
        public void SetPlayedWith(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "SetPlayedWith",
                Args = new object[] {steam_id},

            });



        }
        public void ActivateGameOverlayInviteDialog(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "ActivateGameOverlayInviteDialog",
                Args = new object[] {steam_id},

            });



        }
        public int GetSmallFriendAvatar(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetSmallFriendAvatar",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public int GetMediumFriendAvatar(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetMediumFriendAvatar",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public int GetLargeFriendAvatar(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetLargeFriendAvatar",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public bool RequestUserInformation(IntPtr _, ulong steam_id, bool require_name_only)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "RequestUserInformation",
                Args = new object[] {steam_id, require_name_only},

            });



            return (bool)result.Result;
        }
        public int RequestClanOfficerList(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "RequestClanOfficerList",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public ulong GetClanOwner(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanOwner",
                Args = new object[] {steam_id},

            });



            return (ulong)result.Result;
        }
        public int GetClanOfficerCount(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanOfficerCount",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public ulong GetClanOfficerByIndex(IntPtr _, ulong clan, int officer)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanOfficerByIndex",
                Args = new object[] {clan, officer},

            });



            return (ulong)result.Result;
        }
        public uint GetUserRestrictions(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetUserRestrictions",
                Args = new object[] {},

            });



            return (uint)result.Result;
        }
        public bool SetRichPresence(IntPtr _, string key, string value)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "SetRichPresence",
                Args = new object[] {key, value},

            });



            return (bool)result.Result;
        }
        public bool ClearRichPresence(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "ClearRichPresence",
                Args = new object[] {},

            });



            return (bool)result.Result;
        }
        public string GetFriendRichPresence(IntPtr _, ulong steam_id, string key)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendRichPresence",
                Args = new object[] {steam_id, key},

            });



            return (string)result.Result;
        }
        public int GetFriendRichPresenceKeyCount(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendRichPresenceKeyCount",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public string GetFriendRichPresenceKeyByIndex(IntPtr _, ulong steam_id, int key)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendRichPresenceKeyByIndex",
                Args = new object[] {steam_id, key},

            });



            return (string)result.Result;
        }
        public void RequestFriendRichPresence(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "RequestFriendRichPresence",
                Args = new object[] {steam_id},

            });



        }
        public bool InviteUserToGame(IntPtr _, ulong steam_id, string connect)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "InviteUserToGame",
                Args = new object[] {steam_id, connect},

            });



            return (bool)result.Result;
        }
        public int GetCoplayFriendCount(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetCoplayFriendCount",
                Args = new object[] {},

            });



            return (int)result.Result;
        }
        public ulong GetCoplayFriend(IntPtr _, int index)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetCoplayFriend",
                Args = new object[] {index},

            });



            return (ulong)result.Result;
        }
        public int GetFriendCoplayTime(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendCoplayTime",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public uint GetFriendCoplayGame(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendCoplayGame",
                Args = new object[] {steam_id},

            });



            return (uint)result.Result;
        }
        public int JoinClanChatRoom(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "JoinClanChatRoom",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public bool LeaveClanChatRoom(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "LeaveClanChatRoom",
                Args = new object[] {steam_id},

            });



            return (bool)result.Result;
        }
        public int GetClanChatMemberCount(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanChatMemberCount",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public ulong GetChatMemberByIndex(IntPtr _, ulong steam_id, int index)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetChatMemberByIndex",
                Args = new object[] {steam_id, index},

            });



            return (ulong)result.Result;
        }
        public bool SendClanChatMessage(IntPtr _, ulong steam_id, string msg)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "SendClanChatMessage",
                Args = new object[] {steam_id, msg},

            });



            return (bool)result.Result;
        }
        public int GetClanChatMessage(IntPtr _, ulong steam_id, int index, IntPtr text_out, int max_text, uint chat_type, ref ulong chater_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetClanChatMessage",
                Args = new object[] {steam_id, index, text_out, max_text, chat_type, chater_id},

            });

            chater_id = (ulong)result.Args[5];


            return (int)result.Result;
        }
        public bool IsClanChatAdmin(IntPtr _, ulong chat_id, ulong user_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsClanChatAdmin",
                Args = new object[] {chat_id, user_id},

            });



            return (bool)result.Result;
        }
        public bool IsClanChatWindowOpenInSteam(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsClanChatWindowOpenInSteam",
                Args = new object[] {steam_id},

            });



            return (bool)result.Result;
        }
        public bool OpenClanChatWindowInSteam(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "OpenClanChatWindowInSteam",
                Args = new object[] {steam_id},

            });



            return (bool)result.Result;
        }
        public bool CloseClanChatWindowInSteam(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "CloseClanChatWindowInSteam",
                Args = new object[] {steam_id},

            });



            return (bool)result.Result;
        }
        public bool SetListenForFriendsMessages(IntPtr _, bool intercept)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "SetListenForFriendsMessages",
                Args = new object[] {intercept},

            });



            return (bool)result.Result;
        }
        public bool ReplyToFriendMessage(IntPtr _, ulong steam_id, string msg)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "ReplyToFriendMessage",
                Args = new object[] {steam_id, msg},

            });



            return (bool)result.Result;
        }
        public int GetFriendMessage(IntPtr _, ulong steam_id, int msg_index, IntPtr b_pointer, int b_length, ref uint msg_type)
        {
            var b = new ArgonCore.Util.Buffer();
            b.ReadFromPointer(b_pointer, b_length);


            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFriendMessage",
                Args = new object[] {steam_id, msg_index, b, msg_type},

            });

            b = (ArgonCore.Util.Buffer)result.Args[2];
            msg_type = (uint)result.Args[3];

            b.WriteToPointer(b_pointer, b_length);

            return (int)result.Result;
        }
        public int GetFollowerCount(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetFollowerCount",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public int IsFollowing(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsFollowing",
                Args = new object[] {steam_id},

            });



            return (int)result.Result;
        }
        public int EnumerateFollowingList(IntPtr _, uint starting_index)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "EnumerateFollowingList",
                Args = new object[] {starting_index},

            });



            return (int)result.Result;
        }
        public bool IsClanPublic(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsClanPublic",
                Args = new object[] {steam_id},

            });



            return (bool)result.Result;
        }
        public bool IsClanOfficialGameGroup(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new ArgonCore.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsClanOfficialGameGroup",
                Args = new object[] {steam_id},

            });



            return (bool)result.Result;
        }
    }
}
