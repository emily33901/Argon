using System;

// Autogenerated @ 21/08/18
namespace InterfaceUser
{
    /// <summary>
    /// Implements the map for interface SteamUser019
    /// </summary>
    [Core.Interface.Map(Name = "SteamUser019")]
    public class SteamUser019_Map : Core.Interface.IBaseInterfaceMap
    {
        public int GetHSteamUser(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetHSteamUser",
                Args = new object[] {},

            });



            return (int)result.Result;
        }
        public bool LoggedOn(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "LoggedOn",
                Args = new object[] {},

            });



            return (bool)result.Result;
        }
        public ulong GetSteamID(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetSteamID",
                Args = new object[] {},

            });



            return (ulong)result.Result;
        }
        public int InitiateGameConnection(IntPtr _, IntPtr blob, uint blob_count, ulong gameserver_id, uint server_ip, short server_port, bool secure)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "InitiateGameConnection",
                Args = new object[] {blob, blob_count, gameserver_id, server_ip, server_port, secure},

            });



            return (int)result.Result;
        }
        public void TerminateGameConnection(IntPtr _, uint server_ip, short server_port)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "TerminateGameConnection",
                Args = new object[] {server_ip, server_port},

            });



        }
        public void TrackAppUsageEvent(IntPtr _, ulong game_id, int usage_event, string extra_info)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "TrackAppUsageEvent",
                Args = new object[] {game_id, usage_event, extra_info},

            });



        }
        public bool GetUserDataFolder(IntPtr _, string buffer, int count)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetUserDataFolder",
                Args = new object[] {buffer, count},

            });



            return (bool)result.Result;
        }
        public void StartVoiceRecording(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "StartVoiceRecording",
                Args = new object[] {},

            });



        }
        public void StopVoiceRecording(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "StopVoiceRecording",
                Args = new object[] {},

            });



        }
        public uint GetAvailableVoice(IntPtr _, System.UInt32[] compressed_data, System.UInt32[] uncompressed, uint desired_sample_rate)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetAvailableVoice",
                Args = new object[] {compressed_data, uncompressed, desired_sample_rate},

            });



            return (uint)result.Result;
        }
        public int GetVoice(IntPtr _, bool want_compressed, IntPtr dest_buffer, uint dest_buffer_size, ref uint compressed_bytes_written, bool wants_uncompressed, IntPtr uncompressed_dest, uint uncompressed_buffer_size, ref uint bytes_written, uint uncompressed_desired_samplerate)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetVoice",
                Args = new object[] {want_compressed, dest_buffer, dest_buffer_size, compressed_bytes_written, wants_uncompressed, uncompressed_dest, uncompressed_buffer_size, bytes_written, uncompressed_desired_samplerate},

            });

            compressed_bytes_written = (uint)result.Args[3];
            bytes_written = (uint)result.Args[7];


            return (int)result.Result;
        }
        public int DecompressVoice(IntPtr _, IntPtr compressed, uint compressed_size, IntPtr dest_buffer, uint dest_size, ref uint bytes_written, uint sample_rate)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "DecompressVoice",
                Args = new object[] {compressed, compressed_size, dest_buffer, dest_size, bytes_written, sample_rate},

            });

            bytes_written = (uint)result.Args[4];


            return (int)result.Result;
        }
        public uint GetOptimalSampleRate(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetOptimalSampleRate",
                Args = new object[] {},

            });



            return (uint)result.Result;
        }
        public int GetAuthSessionTicket(IntPtr _, IntPtr ticket, uint ticket_size, ref int ticket_written)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetAuthSessionTicket",
                Args = new object[] {ticket, ticket_size, ticket_written},

            });

            ticket_written = (int)result.Args[2];


            return (int)result.Result;
        }
        public uint BeginAuthSession(IntPtr _, IntPtr ticket, uint ticket_size, ulong steamid)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "BeginAuthSession",
                Args = new object[] {ticket, ticket_size, steamid},

            });



            return (uint)result.Result;
        }
        public void EndAuthSession(IntPtr _, ulong steam_id)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "EndAuthSession",
                Args = new object[] {steam_id},

            });



        }
        public void CancelAuthTicket(IntPtr _, int ticket_handle)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "CancelAuthTicket",
                Args = new object[] {ticket_handle},

            });



        }
        public uint UserHasLicenseForApp(IntPtr _, ulong steamID, uint appID)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "UserHasLicenseForApp",
                Args = new object[] {steamID, appID},

            });



            return (uint)result.Result;
        }
        public void AdvertiseGame(IntPtr _, ulong game_server_id, uint server_ip, short server_port)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "AdvertiseGame",
                Args = new object[] {game_server_id, server_ip, server_port},

            });



        }
        public uint RequestEncryptedAppTicket(IntPtr _, IntPtr data_to_include, uint data_size)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "RequestEncryptedAppTicket",
                Args = new object[] {data_to_include, data_size},

            });



            return (uint)result.Result;
        }
        public int GetGameBadgeLevel(IntPtr _, int seris, bool foil)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetGameBadgeLevel",
                Args = new object[] {seris, foil},

            });



            return (int)result.Result;
        }
        public int GetSteamLevel(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "GetSteamLevel",
                Args = new object[] {},

            });



            return (int)result.Result;
        }
        public uint RequestStoreAuthURL(IntPtr _, string redirect_url)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "RequestStoreAuthURL",
                Args = new object[] {redirect_url},

            });



            return (uint)result.Result;
        }
        public bool IsPhoneVerified(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsPhoneVerified",
                Args = new object[] {},

            });



            return (bool)result.Result;
        }
        public bool IsTwoFactorEnabled(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsTwoFactorEnabled",
                Args = new object[] {},

            });



            return (bool)result.Result;
        }
        public bool IsPhoneIdentifying(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsPhoneIdentifying",
                Args = new object[] {},

            });



            return (bool)result.Result;
        }
        public bool IsPhoneRequiringVerification(IntPtr _)
        {

            var result = Client.ClientPipe.CallSerializedFunction(PipeId, new Core.IPC.SerializedFunction()
            {
                ClientId = ClientId,
                InterfaceId = InterfaceId,
                Name = "IsPhoneRequiringVerification",
                Args = new object[] {},

            });



            return (bool)result.Result;
        }
    }
}
